Sys.time()
stockdata.annual
}
})
Sys.time()
stock.all.annually <- c()
allPermnos <- unique(stock.data$PERMNO)
Sys.time()
stock.annually <- apply(matrix(allPermnos[1]),1,function(x){
print(x)
Sys.time()
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
Sys.time()
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
Sys.time()
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
Sys.time()
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
Sys.time()
stockdata.annual <- as.data.frame(stockdata.annual)
Sys.time()
stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
Sys.time()
stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
Sys.time()
stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
Sys.time()
for(i in 1:dim(stockdata.annual)[1]){
possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
}
Sys.time()
stockdata.annual
}
})
Sys.time()
stock.annually.final <- data.frame()
for(count in 1:length(stock.annually)){
stock.annually.final <- rbind(stock.annually.final,stock.annually[[count]])
}
x <- permnos[1]
Sys.time()
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
Sys.time()
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
Sys.time()
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
Sys.time()
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
Sys.time()
stockdata.annual <- as.data.frame(stockdata.annual)
Sys.time()
stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
Sys.time()
stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
Sys.time()
stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
Sys.time()
for(i in 1:dim(stockdata.annual)[1]){
possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
}
Sys.time()
stockdata.annual
}
Sys.time()
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
Sys.time()
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
Sys.time()
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
Sys.time()
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
Sys.time()
stockdata.annual <- as.data.frame(stockdata.annual)
Sys.time()
stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
Sys.time()
stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
Sys.time()
stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
Sys.time()
for(i in 1:dim(stockdata.annual)[1]){
possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
}
Sys.time()
stockdata.annual
}
Sys.time()
stock.annually <- apply(matrix(allPermnos[1]),1,function(x){
print(x)
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
Sys.time()
Sys.time()
stock.annually <- apply(matrix(allPermnos),1,function(x){
print(x)
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
Sys.time()
stock.annually <- apply(matrix(allPermnos),1,function(x){
if(mod%%400 == 0){
print(paste(x,Sys.time()))
}
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
Sys.time()
Sys.time()
stock.annually <- apply(matrix(allPermnos),1,function(x){
if(x%%400 == 0){
print(paste(x,Sys.time()))
}
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
library(dplyr)
stock.data.new <- stock.data[!is.na(stock.data$RET),]
stock.data.new <- stock.data[!is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stock.annually <- apply(matrix(allPermnos),1,function(x){
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
}
}
}
stock.data.new <- stock.data[!is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stock.data.new[,-1],order.by=as.Date(stock.data.new$DATE))
x <- allPermnos[1]
x
stockdata <- stockdata.xts %>% filter(PERMNO == x)
library(dplyr)
stockdata <- stockdata.xts %>% filter(PERMNO == x)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("installr");
library(installr)
library(DataAnalytics)
library(installr)
install.packages("installr")
library(installr)
updateR()
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql1 <- "SELECT * FROM ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPQ.ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.CCMFUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM COMPM.FUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.CCMFUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql2 <- "SELECT * FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
dummy1
head(dummy1)
View(dummy1)
sql2 <- "SELECT RDQ,OANCFY,IVNCFY,FINCFY FROM COMPM.FUNDQ WHERE gvkey = '012141'"
head(dummy1) <- getData(sql2)
dummy1 <- getData(sql2)
dummy1
sql2 <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
View(dummy1)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql2 <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.fundamentals <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentals <- "SELECT RDQ AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.dumm1 <- "SELECT * FROM COMPM.FUNDA"
sql.dumm1 <- "SELECT * FROM COMPM.FUNDA"
dummy5 <- getData(sql.dumm1,1)
View(dummy5)
sql.fundamentals <- "SELECT DATATDATE AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentals <- "SELECT DATADATE AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentalsq <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal FROM COMPM.FUNDQ"
fundamentals.quarterly <- getData(sql.fundamentalsq)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.permnoLink <- "SELECT GVKEY,LPERMNO FROM CRSPA.CCMXPF_LINKTABLE"
permnoLink <- getData(sql.permnoLink)
sql.stocknames <- "SELECT PERMNO,COMNAM FROM CRSPA.STOCKNAMES"
stocknames <- getData(sql.stocknames)
sql.fundamentals <- "SELECT GVKEY AS GVKEY, DATADATE AS Date,OANCF AS OperatingCF,
IVNCF AS InvestingCF,FINCF AS FinancingCF,
DLC AS CurrentDebt, DLTT AS LongTermDebt,
AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA funda"
fundamentals <- getData(sql.fundamentals)
suppressWarnings(library(dplyr))
fundamentals %<% filter(GVKEY == 012141)
fundamentals %>% filter(GVKEY == 012141)
fundamentals %>% filter(GVKEY == '012141')
fundamentals %>% filter(GVKEY == '012141') %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF)
fundamentals %>% filter(GVKEY == '012141') %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF) %>% mutate(marketLRatio = (CurrentDebt+LongTermDebt)/TotalAssets)
fundamentals %>% filter(GVKEY == '012141') %>% filter(complete.cases(.))
fundamentals %>% filter(GVKEY == '012141') %>% filter(complete.cases(.)) %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF) %>% mutate(marketLRatio = (CurrentDebt+LongTermDebt)/TotalAssets) %>% mutate(bookLRatio = (CurrentDebt+LongTermDebt)/(CurrentDebt+LongTermDebt+CommonEq))
sql.fundamentals <- "SELECT GVKEY AS GVKEY, DATADATE AS Date,OANCF AS OperatingCF,
IVNCF AS InvestingCF,FINCF AS FinancingCF,RE as Earnings,
DLC AS CurrentDebt, DLTT AS LongTermDebt,
AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA funda"
fundamentals <- getData(sql.fundamentals)
setwd("C:/_UCLA/IAQF")
#libraries
library(readxl)
suppressMessages(library(xts))
suppressMessages(library(dplyr))
suppressMessages(library(quantmod))
suppressMessages(library(xtable))
suppressMessages(library(lubridate))
##GET BLOOMBERG AND FRED DATA
read_excel_allsheets <- function(filename) {
sheets <- readxl::excel_sheets(filename)
x <-    lapply(sheets, function(X) readxl::read_excel(filename, sheet = X,skip = 1))
names(x) <- sheets
x
}
suppressWarnings(data <- read_excel_allsheets("Data_FixedIncome_IAQF.xlsx"))
suppressWarnings(dataNew <- read_excel_allsheets("IAQF_Data.xlsx"))
suppressWarnings(dataNew <- read_excel_allsheets("10YearBondYield.xlsx"))
govt.10year <- xts(dataNew$Sheet2$PX_LAST,order.by = as.Date(dataNew$Sheet2$Date))
govt.10Year.daily <- diff(govt.10year)/100
colnames(govt.10Year.daily) <- "10YrGovtRet"
govt.10Year.Weekly <- apply.weekly(1+govt.10Year.daily,prod)-1
colnames(govt.10Year.Weekly) <- "10YrGovtRet"
hikePeriods <- matrix(c("1983-03-31","1984-08-09","1988-03-30","1989-05-17","1994-02-04","1995-02-01","1999-06-30","2000-05-16","2004-06-30","2006-06-29","2006-06-29","2009-06-30","2009-07-01","2017-02-01"),ncol=2,byrow = TRUE)
hikePeriodNames <- c("83_84","88_89","94_95","99_00","04_06")
AllPeriods <- c(hikePeriodNames,"Recession","Now")
#calculate return of data provided
hikePeriodData <- function(data.returns,basedata){
data.full <- na.omit(merge.xts(basedata,data.returns))
data.HikePeriods <- lapply(1:nrow(hikePeriods),function(x){
period <- paste0(hikePeriods[x,1],"/",hikePeriods[x,2])
data.full[period]
})
names(data.HikePeriods) <- AllPeriods
return(data.HikePeriods)
}
#Get the necessary stats
Necessarystats <- function(data,freq="Y"){
lapply(data,function(x){
if(nrow(x) > 0){
means <- apply(x,2,mean)
sds <- apply(x,2,sd)
noOfYrs <- as.numeric(difftime(max(index(x)),min(index(x)),units = "weeks")/52.25)
annualizedReturnsAvg <- sapply(1+x,function(y){mean(apply.yearly(y,prod))})-1
multipler = 1
if(freq=="D"){
multiplier = sqrt(250)
}
else if(freq=="W"){
multiplier = sqrt(52)
}
else if(freq=="M"){
multipler = sqrt(12)
}
annualizedSd <- sds*multiplier
sharpeRatio <- annualizedReturnsAvg/annualizedSd
rbind(means,sds,annualizedReturnsAvg,annualizedSd,sharpeRatio)
}
})
}
#Get Weekly data
weeklyData <- function(data){
lapply(data,function(x){
if(nrow(x)>0){
y1 <- apply.weekly(1+x[,1],prod)-1
y2 <- apply.weekly(1+x[,2],prod)-1
cbind(y1,y2)
}
})
}
#Calculating rolling correlation
rollingCorrelations <- function(data,RequiredFreq='D'){
Rollfreq <- 1
if(RequiredFreq=='D'){
Rollfreq  <- 60
}
else if(RequiredFreq=='W'){
Rollfreq <- 12
}
else if(RequiredFreq=='M'){
Rollfreq <-  3
}
lapply(data,function(x){
rollapply(x,Rollfreq,function(x) cor(x[,1],x[,2]),by.column = FALSE)
})
}
BarcTotalAggr <- xts(data$`Barclays US Total Aggregate`[,c(2,3)],data$`Barclays US Total Aggregate`$Date)
BarcTotalAggr.Daily <- diff(BarcTotalAggr[,2])/100
colnames(BarcTotalAggr.Daily) <- "BarcAggr"
BarcTotalAggr.HikePeriods.Daily <- hikePeriodData(BarcTotalAggr.Daily,govt.10Year.daily)[hikePeriodNames]
#Equity
dataEquity <- read.csv("equity_sector_return.csv")
equity.sectors <- xts(dataEquity[-1]/100,ymd(dataEquity$Date))
energy.HikePeriod <- hikePeriodData(equity.sectors$Enrgy,govt.10Year.daily)[hikePeriodNames]
telecom.HikePeriod <- hikePeriodData(equity.sectors$Telcm,govt.10Year.daily)[hikePeriodNames]
health.HikePeriod <- hikePeriodData(equity.sectors$Hlth,govt.10Year.daily)[hikePeriodNames]
#Commodities
dataGold <- read.csv("GOLD_FUTURE.csv")
gold <- xts(dataGold[-1],as.Date(dataGold$Date,"%m/%d/%Y"))
colnames(gold) <- c("Gold")
gold <- (gold - lag(gold))/lag(gold)[-1]
gold.HikePeriod <- hikePeriodData(gold,govt.10Year.daily)[hikePeriodNames]
dataOil <- read.csv("OIL_FUTURE.csv")
oil <- xts(dataOil[-1],as.Date(dataOil$Date,"%m/%d/%Y"))
colnames(oil) <- c("Oil")
oil <- (oil - lag(oil))/lag(oil)[-1]
oil.HikePeriod <- hikePeriodData(oil,govt.10Year.daily)[hikePeriodNames]
#FX
zar.data <- read.csv("ZAR.csv")
zar <- xts(zar.data$daily.returns,as.Date(zar.data$Index,"%m/%d/%y"))
colnames(zar) <- "ZAR"
zar.HikePeriod <- hikePeriodData(zar,govt.10Year.daily)[hikePeriodNames]
rm("hikePeriodData")
rm("Necessarystats")
rm("read_excell_allsheets")
rm("read_excel_allsheets")
rm("rollingCorrelations")
rm("weeklyData")
rm("BarcTotalAggr")
equity.sectors
colnames(equity.sectors)
energy.data <- equity.sectors$Enrgy
telecom.data <- equity.sectors$Telcm
health.data <- equity.sectors$Hlth
rm("dataEquity")
rm("dataGold")
rm("dataOil")
rm("equity.sectors")
rm("govt.10year")
rm("govt.10year.daily")
rm("govt.10year.daily")
rm("govt.10Year.daily")
rm("govt.10Year.WEekly")
rm("govt.10Year.Weekly")
rm("hikePeriods")
rm("zar")
rm("AllPeriods")
rm("BarcTotalAggr.HikePeriods")
rm("BarcTotalAggr.HikePeriod")
rm("BarcTotalAggr.HikePeriods.Daily")
rm("data")
rm("dataNew")
rm("energy.HikePeriod")
rm("gold.HikePeriod")
rm("health.HikePeriod")
rm("hikePeriodNames")
rm("oil.HikePeriod")
rm("pass")
rm("telecom.HikePeriod")
rm("user")
rm("zar.HikePeriod")
zar <- xts(zar.data$daily.returns,as.Date(zar.data$Index,"%m/%d/%y"))
rm("zar.data")
save.image("C:/_UCLA/IAQF/AssetClassReturns.RData")
result
load("IAQF_eco.RData")
weights = as.data.frame(matrix(nrow = 6,ncol=6))
percentage = c()
library(dplyr)
library(xts)
period=list()
for(i in 1:6){
period[[i]] = as.data.frame(matrix())
}
ts.data=merge(Real_GDP_Growth,PPI,join='left') %>%merge(Personal_Con_Exp,join='left')%>%merge(Non_Farm_Payroll,join='left')%>%merge(Indus_Production,join='left')%>%merge(Average_Hourly_Earnings,join='left')
period[[1]]=ts.data["1983-03-31/1984-08-09",]
period[[2]]=ts.data["1988-03-30/1989-05-17",]
period[[3]] =ts.data["1994-02-04/1995-02-01",]
period[[4]] =ts.data["1999-06-30/2000-05-16",]
period[[5]] = ts.data["2004-06-30/2006-06-29",]
period[[6]] = ts.data["2016-06-30/"]
rescale = function(x){
return((x-mean(x))/sd(x))
}
normalize = function(x){
return(x/sqrt(crossprod(x)))
}
distance = function(x){
dis = 1-crossprod(x,tem[,6])
return(dis)
}
for(i in 1:6){
out=prcomp(t(period[[i]]))
out$rotation
percentage[i] = (out$sdev^2/sum(out$sdev^2))[1]
pc = as.data.frame(out$rotation)
weights[i,] = (abs(pc$PC1))%*%period[[i]]
}
weights=apply(weights,2,rescale)
tem=apply(weights[1:nrow(weights),],1,normalize)
distbetween = apply(tem[,1:5],2,distance)
result = (2-distbetween)/sum(2-distbetween)
result
hikePeriodNames <- c("83_84","88_89","94_95","99_00","04_06")
hikePeriodNames
